#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/* #define DEFAULT 0 */
/* #define DH_BASE_QWERTY 1 */
/* #define DH_BASE_DVORAK 2 */
/* #define FN 3 */
/* #define MOD 4 */
/* #define DH_MOD_A 5 */
/* #define DH_MOD_B 6 */

#define DEFAULT 0
#define DH_BASE_QWERTY 1
#define FN 2
#define MOD 3

#define KEYS_LEFT 0 1 2 3 4 5 6 \
                  14 15 16 17 18 19 20 \
                  28 29 30 31 32 33 34 \
                  46 47 48 49 50 51 \
                  66 67 68 69 70

#define KEYS_RIGHT 7 8 9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                   60 61 62 63 64 65 \
                   77 78 79 80 81

#define THUMBS_LEFT 35 36 54 71 72 73

#define THUMBS_RIGHT 37 38 57 74 75 76

#define THUMBS THUMBS_LEFT THUMBS_RIGHT

/ {
    behaviors {
      #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp RET>;
      };
      #endif

/* -- ` or | */
      gpipe: grave_pipe {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp GRAVE>, <&kp PIPE>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- | or | */
      ppipe: pipe_pipe {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp PIPE>, <&kp PIPE>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- + or 1 */
      pkp_n1: plus_kp_n1 {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp PLUS>, <&kp N1>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- [ or 2 */
      lkp_n2: left_bracket_kp_n2 {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp LEFT_BRACKET>, <&kp N2>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- { or 3 */
      lkp_n3: left_brace_kp_n3 {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp LEFT_BRACE>, <&kp N3>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- ( or 4 */
      lkp_n4: left_parenthesis_kp_n4 {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp LEFT_PARENTHESIS>, <&kp N4>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- & or 5 */
      akp_n5: amps_kp_n5 {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp AMPS>, <&kp N5>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- = or 6 */
      ekp_n6: equal_kp_n6 {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp EQUAL>, <&kp N6>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- ) or 7 */
      rkp_n7: right_parenthesis_kp_n7 {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp RIGHT_PARENTHESIS>, <&kp N7>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- } or 8 */
      rkp_n8: right_brace_kp_n8 {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp RIGHT_BRACE>, <&kp N8>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- ] or 9 */
      rkp_n9: right_bracket_kp_n9 {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp RIGHT_BRACKET>, <&kp N9>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- * or 0 */
      skp_n0: star_kp_n0 {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp STAR>, <&kp N0>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- ! or % */
      eprcnt: excl_prcnt {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp EXCL>, <&kp PRCNT>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- $ or ` */
      dgrave: dllr_grave {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp DLLR>, <&kp GRAVE>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- ` or ` */
      ggrave: grave_grave {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp GRAVE>, <&kp GRAVE>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- \ or # */
      bhash: bslh_hash {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp BSLH>, <&kp HASH>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- @ or ^ */
      acaret: at_caret {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp AT>, <&kp CARET>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- quote or left arrow */
      aposleft: apos_left {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp APOS>, <&kp LEFT>;
          mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
      };

/* -- alt or right arrow */
      altright: alt_right {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&kp LALT>, <&kp RIGHT>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
      };


/* LEFT_SHIFT + BACKSPACE into DELETE, and morphs RIGHT_SHIFT + BACKSPACE into RIGHT_SHIFT + DELETE. */
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <150>;
          quick_tap_ms = <0>;
          #flavor = "tap-preferred";
          flavor = "balanced";
          bindings = <&kp>, <&kp>;
      };

      hm_l: homerow_mods_left {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_LEFT";
          #binding-cells = <2>;
          tapping-term-ms = <150>;
          quick_tap_ms = <0>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
          hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
      };

      hm_r: homerow_mods_right {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_RIGHT";
          #binding-cells = <2>;
          tapping-term-ms = <150>;
          quick_tap_ms = <0>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
          hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
      };
    };

  keymap {
    compatible = "zmk,keymap";

    default {
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog DH_BASE_QWERTY                                                              &mo MOD   &kp N6    &kp N7    &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &none                                                                            &none     &kp Y     &kp U     &kp I     &kp O    &kp P    &kp BSLH
        &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &none                     &kp LCTRL &kp LALT &kp LGUI  &kp RCTRL                 &none     &kp H     &kp J     &kp K     &kp L    &kp SEMI &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                                      &kp HOME &kp PG_UP                                     &kp N     &kp M     &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
        &mo FN    &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                           &kp BSPC &kp DEL  &kp END  &kp PG_DN &kp ENTER &kp SPACE                           &mo UP    &kp DOWN  &kp LBKT &kp RBKT &mo FN
      >;
    };

    dh_base_qwerty {
      bindings = <
        &ppipe          &pkp_n1             &lkp_n2             &lkp_n3         &lkp_n4       &akp_n5        &tog DH_BASE_QWERTY                                                                  &mo MOD         &ekp_n6           &rkp_n7               &rkp_n8               &rkp_n9       &skp_n0     &eprcnt
        &kp TAB         &kp Q               &kp W               &kp E           &kp R         &kp T          &none                                                                                &none           &kp Y             &kp U                 &kp I                 &kp O         &kp P       &bhash
        &kp ESC         &kp A               &kp S               &kp D           &kp F         &kp G          &none                       &kp LCTRL  &kp LGUI  &kp LGUI  &kp RCTRL                 &none           &kp H             &kp J                 &kp K                 &kp L         &kp SEMI    &kp MINUS
        &kp LSHFT       &kp Z               &kp X               &kp C           &kp V         &kp B                                                  &kp LALT  &kp RALT                                           &kp N             &kp M                 &kp COMMA             &kp DOT       &kp FSLH    &kp RSHFT
        &mo FN          &dgrave             &kp GRAVE           &kp LEFT        &altright                                       &bspc_del &kp DEL    &kp HOME  &kp END &kp ENTER &kp SPACE                                         &kp DOWN                &kp UP              &kp APOS      &acaret     &mo FN
      >;
    };

    /* dh_base_dvorak { */
    /*   bindings = < */
    /*     &ppipe    &pkp_n1     &lkp_n2   &lkp_n3  &lkp_n4    &akp_n5 &tog &none                                                                         &mo MOD       &ekp_n6     &rkp_n7     &rkp_n8     &rkp_n9     &skp_n0   &eprcnt */
    /*     &kp TAB   &kp SEMI    &kp COMMA &kp DOT  &kp P      &kp Y   &tog DH_BASE_DVORAK                                                                          &none       &kp F       &kp G       &kp C       &kp R       &kp L     &bhash */
    /*     &kp ESC   &kp A       &kp O     &kp E    &kp U      &kp I   &none               &kp LCTRL   &kp LALT   &kp LGUI    &kp RCTRL                &none       &kp D       &kp H       &kp T       &kp N       &kp S     &kp MINUS */
    /*     &kp LSHFT &kp APOS    &kp Q     &kp J    &kp K      &kp X                                   &kp HOME   &kp PG_UP                                        &kp B       &kp M       &kp W       &kp V       &kp Z     &kp RSHFT */
    /*     &mo FN     &dgrave     &ggrave   &kp LEFT &kp RIGHT                    &kp BSPC  &kp DEL     &kp END    &kp PG_DN   &kp ENTER   &kp SPACE                            &mo 5       &kp 6       &kp FSLH    &acaret   &mo  FN */
    /*     >; */
    /* }; */

    fn {
      bindings = <
        &kp F1 &kp F2 &kp F3              &kp F4 &kp F5 &kp F6  &tog DEFAULT                                            &mo DEFAULT  &kp F7  &kp F8                  &kp F9                  &kp F10                 &kp F11             &kp F12
        &trans &trans &trans              &trans &trans &trans  &none                                                   &none        &trans  &trans                  &trans                  &trans                  &trans              &trans
        &trans &trans &kp LG(LS(LA(F5)))  &trans &trans &trans  &none                &trans &trans &trans &trans        &none        &trans  &kp LG(LS(LA(F1)))      &kp LG(LS(LA(F2)))      &kp LG(LS(LA(F3)))      &kp LG(LS(LA(F4)))  &trans
        &trans &trans &trans              &trans &trans &trans                              &trans &trans                            &trans  &trans                  &trans                  &trans                  &trans              &trans
        &trans &trans &trans              &trans &trans                       &trans &trans &trans &trans &trans &trans                      &trans                  &trans                  &trans                  &trans              &trans
      >;
    };

    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                     &trans                 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &bootloader                                                               &bootloader            &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &none                   &none &none &bt BT_CLR &none                      &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &macro_ver   &none                                      &none &none                                                        &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none                                       &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none &none &none
      >;
    };

    /* dh_mod_a { */
    /*   bindings = < */
    /*     &trans                  &trans            &trans                &trans                  &trans                 &trans               &trans                                                               &trans      &trans      &trans      &trans      &trans      &trans      &trans */
    /*     &trans                  &trans            &trans                &trans                  &trans                 &trans               &trans                                                               &trans      &trans      &trans      &trans      &trans      &trans      &trans */
    /*     &trans                  &trans            &trans                &trans                  &trans                 &trans               &trans                                                               &trans      &trans      &trans      &trans      &trans      &trans      &trans */
    /*     &trans                  &trans            &trans                &trans                  &trans                 &trans                                          &trans &trans                                         &trans      &trans      &trans      &trans      &trans      &trans */
    /*     &trans                  &trans            &trans                &trans                  &trans                                                   &trans &trans &trans &trans &trans &trans                                       &trans      &trans      &trans      &trans      &trans */
    /*   >; */
    /* }; */

    /* dh_mod_b { */
    /*   bindings = < */
    /*     &trans                  &kp N1            &kp N2                &kp N3                  &kp N4                 &kp N5               &trans                                                               &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &trans      &trans */
    /*     &trans                  &trans            &trans                &trans                  &trans                 &trans               &trans                                                               &trans      &trans      &kp KP_N7   &kp KP_N8   &kp KP_N9   &trans      &trans */
    /*     &trans                  &trans            &trans                &trans                  &trans                 &trans               &trans                                                               &trans      &trans      &kp KP_N4   &kp KP_N5   &kp KP_N6   &trans      &trans */
    /*    &trans                  &trans            &trans                &trans                  &trans                 &trans                                          &trans &trans                                         &trans      &kp KP_N1   &kp KP_N2   &kp KP_N3   &trans      &trans */
    /*     &trans                  &trans            &trans                &trans                  &trans                                                   &trans &trans &trans &trans &trans &trans                                       &kp KP_N0   &trans      &trans      &trans      &trans */
    /*   >; */
    /* }; */
  };
};
